import {BaseMessagePurpose, BaseTriggerActions, WidgetType} from "../../constants";
import { v4 as uuidv4 } from "uuid";

export interface ReceiverMessagePayload {
  updateWidgets: {
    // updated widget id, normally is the widget itself,
    // but when you want to trigger an action by this widget, but update other widget data,
    // place the widgets' id that you want to update here
    widgetId: string;
    widgetType: WidgetType;
    data?: any;
  }[];
  webviewVersion?: string;
}

export interface SenderMessagePayload {
  triggerWidgets: {
    widgetId?: string;
    widgetType?: WidgetType;
    action?: BaseTriggerActions;
    data?: any;
    version?: string;
  }[];
}

export interface MessageInterface {
  id?: string;
  purpose: BaseMessagePurpose;
  widgetId: string;
  widgetType: WidgetType;
  widgetWidth?: number;
  widgetHeight?: number;
  receiverMessagePayload?: ReceiverMessagePayload;
  senderMessagePayload?: SenderMessagePayload;
  configDataString?: string;

  chunkIndex?: number;
  totalChunks?: number;
  isChunk?: boolean;
}

export class Message {
  get configDataString(): string | undefined {
    return this._configDataString;
  }

  set configDataString(value: string) {
    this._configDataString = value;
  }

  get id(): string {
    return this._id;
  }

  set id(value: string) {
    this._id = value;
  }

  private _id: string;
  private _purpose: BaseMessagePurpose;
  // this widget id
  private _widgetId: string;
  private _widgetType: WidgetType;
  private _widgetWidth?: number;
  private _widgetHeight?: number;
  private _receiverMessagePayload?: ReceiverMessagePayload;
  private _senderMessagePayload?: SenderMessagePayload;
  // the widget config string to initialize the widget, for example, yamlText for report builder
  private _configDataString?: string;

  private _chunkIndex?: number;
  private _totalChunks?: number;
  private _isChunk?: boolean;

  constructor({
                id,
                purpose,
                widgetId,
                widgetType,
                widgetWidth,
                widgetHeight,
                receiverMessagePayload,
                senderMessagePayload,
                chunkIndex,
                totalChunks,
                isChunk,
                configDataString
              }: MessageInterface) {
    this._id = id ?? uuidv4();
    this._widgetId = widgetId;
    this._widgetType = widgetType;
    this._widgetWidth = widgetWidth;
    this._widgetHeight = widgetHeight;
    this._purpose = purpose;
    this.receiverMessagePayload = receiverMessagePayload;
    this.senderMessagePayload = senderMessagePayload;
    this._configDataString = configDataString;
    this._chunkIndex = chunkIndex;
    this._totalChunks = totalChunks;
    this._isChunk = isChunk;
  }

  /**
   * Get chunkIndex
   * @return {number} - Chunk Index
   */
  get chunkIndex(): number | undefined {
    return this._chunkIndex;
  }

  /**
   * Set chunkIndex
   * @param value {number} - Chunk Index
   */
  set chunkIndex(value: number) {
    this._chunkIndex = value;
  }

  /**
   * Get totalChunks
   * @return {number} - Total Chunks
   */
  get totalChunks(): number | undefined {
    return this._totalChunks;
  }

  /**
   * Set totalChunks
   * @param value {number} - Total Chunks
   */
  set totalChunks(value: number) {
    this._totalChunks = value;
  }

  /**
   * Check if the message is a chunk
   * @return {boolean} - Is Chunk
   */
  get isChunk(): boolean | undefined {
    return this._isChunk;
  }

  /**
   * Set if the message is a chunk
   * @param value {boolean} - Is Chunk
   */
  set isChunk(value: boolean) {
    this._isChunk = value;
  }

  /**
   * Get Widget ID - Generated by Webview2
   *
   *
   * @return {string} - Widget ID
   */
  get widgetId(): string {
    return this._widgetId;
  }

  /**
   * Set Widget ID - Generated by Webview2
   * @param value {string} - Widget ID
   */
  set widgetId(value: string) {
    this._widgetId = value;
  }

  /**
   * Get Widget Type
   * @return {string} - Widget Type
   */
  get widgetType(): WidgetType {
    return this._widgetType;
  }

  /**
   * Set Widget Type
   * @param value {WidgetType} - Widget Type
   */
  set widgetType(value: WidgetType) {
    this._widgetType = value;
  }


  /**
   * purpose of the sending this message
   * F is defined by each widget, means what is the message going to do
   * e.g. 1. purpose: 'changeBarColor' means the message is going to change the color of the bar for bar chart widget
   *     2. purpose: 'updateWidgetData' means the message is going to update the widget data
   *
   * @return {BaseMessagePurpose} - Message Purpose
   */
  get purpose(): BaseMessagePurpose {
    return this._purpose;
  }


  /**
   * purpose of the sending this message
   * F is defined by each widget, means what is the message going to do
   * e.g. 1. purpose: 'changeBarColor' means the message is going to change the color of the bar for bar chart widget
   *    2. purpose: 'updateWidgetData' means the message is going to update the widget data
   *
   * @param value {BaseMessagePurpose} - Message Purpose
   */
  set purpose(value: BaseMessagePurpose) {
    this._purpose = value;
  }


  get receiverMessagePayload(): ReceiverMessagePayload | undefined {
    return this._receiverMessagePayload;
  }

  set receiverMessagePayload(value: ReceiverMessagePayload | undefined) {
    if (value) {
      const parsedUpdateWidgets = value.updateWidgets.map(t => {
        if (t.widgetId == null) t.widgetId = this.widgetId;
        if (t.widgetType == null) t.widgetType = this.widgetType;
        return t;
      })
      this._receiverMessagePayload = {
        ...value,
        updateWidgets: parsedUpdateWidgets,
      };
    }
  }

  get senderMessagePayload(): SenderMessagePayload | undefined {
    return this._senderMessagePayload;
  }

  set senderMessagePayload(value: SenderMessagePayload | undefined) {
    if (value) {
      const parsedTriggerWidgets = value.triggerWidgets.map(t => {
        if (t.widgetId == null) t.widgetId = this.widgetId;
        if (t.widgetType == null) t.widgetType = this.widgetType;
        return t;
      })
      this._senderMessagePayload = {
        ...value,
        triggerWidgets: parsedTriggerWidgets,
      };
    }
  }

  get widgetWidth(): number | undefined {
    return this._widgetWidth;
  }

  set widgetWidth(value: number) {
    this._widgetWidth = value;
  }

  get widgetHeight(): number | undefined {
    return this._widgetHeight;
  }

  set widgetHeight(value: number) {
    this._widgetHeight = value;
  }

  /**
   * Send message to WebView2
   */
  toJSON(): MessageInterface {
    return {
      widgetId: this.widgetId,
      widgetType: this.widgetType,
      purpose: this.purpose,
      widgetWidth: this.widgetWidth,
      widgetHeight: this.widgetHeight,
      senderMessagePayload: this.senderMessagePayload,
      chunkIndex: this.chunkIndex,
      totalChunks: this.totalChunks,
      isChunk: this.isChunk
    };
  }

  toString(): string {
    return JSON.stringify(this.toJSON());
  }

  static toMessage(message: string): Message | undefined {
    try {
      const parsedMessage = JSON.parse(message);
      return new Message(
        {
          widgetId: parsedMessage.widgetId ?? undefined,
          widgetType: parsedMessage.widgetType ?? undefined,
          purpose: parsedMessage.purpose ?? undefined,
          widgetWidth: parsedMessage.widgetWidth ?? undefined,
          widgetHeight: parsedMessage.widgetHeight ?? undefined,
          senderMessagePayload: parsedMessage.senderMessagePayload ?? undefined,
          receiverMessagePayload: parsedMessage.receiverMessagePayload ?? undefined,
          chunkIndex: parsedMessage.chunkIndex ?? undefined,
          totalChunks: parsedMessage.totalChunks ?? undefined,
          isChunk: parsedMessage.isChunk ?? false
        }
      );
    } catch (JSONError) {
      console.error('JSON parse error:', JSONError);
      return undefined;
    }
  }
}