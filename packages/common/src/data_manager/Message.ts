import {BaseMessagePurpose, WidgetType} from "../../constants";
import {ActionRequest, MessagePayload} from "../../type";
import * as console from "node:console";

/**
 * Message class
 * T is the payload type
 * S is the trigger action type
 * F is the message purpose type
 */
export class Message {
  get acknowledge(): boolean | undefined {
    return this._acknowledge;
  }

  set acknowledge(value: boolean) {
    this._acknowledge = value;
  }

  private _purpose: BaseMessagePurpose;
  private _widgetId?: string;
  private _widgetType?: WidgetType;
  private _widgetWidth?: number;
  private _widgetHeight?: number;
  private _payload?: MessagePayload;
  private _actionRequest?: ActionRequest;
  private _sequenceId?: string;
  private _chunkIndex?: number;
  private _totalChunks?: number;
  private _isChunk?: boolean;
  private _acknowledge?: boolean;

  constructor({
                purpose,
                widgetId,
                widgetType,
                widgetWidth,
                widgetHeight,
                payload,
                actionRequest,
                sequenceId,
                chunkIndex,
                totalChunks,
                isChunk,
                acknowledge,
              }: {
    purpose: BaseMessagePurpose;
    widgetId?: string;
    widgetType?: WidgetType;
    widgetWidth?: number;
    widgetHeight?: number;
    payload?: MessagePayload;
    actionRequest?: ActionRequest;
    sequenceId?: string;
    chunkIndex?: number;
    totalChunks?: number;
    isChunk?: boolean;
    acknowledge?: boolean;
  }) {
    this._widgetId = widgetId;
    this._widgetType = widgetType;
    this._widgetWidth = widgetWidth;
    this._widgetHeight = widgetHeight;
    this._purpose = purpose;
    this._payload = payload;
    this._actionRequest = actionRequest;
    this._sequenceId = sequenceId;
    this._chunkIndex = chunkIndex;
    this._totalChunks = totalChunks;
    this._isChunk = isChunk;
    this._acknowledge = acknowledge;
  }

  /**
   * Get sequenceId
   * @return {string} - Sequence ID
   */
  get sequenceId(): string | undefined {
    return this._sequenceId;
  }

  /**
   * Set sequenceId
   * @param value {string} - Sequence ID
   */
  set sequenceId(value: string) {
    this._sequenceId = value;
  }

  /**
   * Get chunkIndex
   * @return {number} - Chunk Index
   */
  get chunkIndex(): number | undefined {
    return this._chunkIndex;
  }

  /**
   * Set chunkIndex
   * @param value {number} - Chunk Index
   */
  set chunkIndex(value: number) {
    this._chunkIndex = value;
  }

  /**
   * Get totalChunks
   * @return {number} - Total Chunks
   */
  get totalChunks(): number | undefined {
    return this._totalChunks;
  }

  /**
   * Set totalChunks
   * @param value {number} - Total Chunks
   */
  set totalChunks(value: number) {
    this._totalChunks = value;
  }

  /**
   * Check if the message is a chunk
   * @return {boolean} - Is Chunk
   */
  get isChunk(): boolean | undefined {
    return this._isChunk;
  }

  /**
   * Set if the message is a chunk
   * @param value {boolean} - Is Chunk
   */
  set isChunk(value: boolean) {
    this._isChunk = value;
  }

  /**
   * Get Widget ID - Generated by Webview2
   *
   *
   * @return {string} - Widget ID
   */
  get widgetId(): string | undefined {
    return this._widgetId;
  }

  /**
   * Set Widget ID - Generated by Webview2
   * @param value {string} - Widget ID
   */
  set widgetId(value: string) {
    this._widgetId = value;
  }

  /**
   * Get Widget Type
   * @return {string} - Widget Type
   */
  get widgetType(): WidgetType | undefined {
    return this._widgetType;
  }

  /**
   * Set Widget Type
   * @param value {WidgetType} - Widget Type
   */
  set widgetType(value: WidgetType) {
    this._widgetType = value;
  }


  /**
   * purpose of the sending this message
   * F is defined by each widget, means what is the message going to do
   * e.g. 1. purpose: 'changeBarColor' means the message is going to change the color of the bar for bar chart widget
   *     2. purpose: 'updateWidgetData' means the message is going to update the widget data
   *
   * @return {BaseMessagePurpose} - Message Purpose
   */
  get purpose(): BaseMessagePurpose {
    return this._purpose;
  }


  /**
   * purpose of the sending this message
   * F is defined by each widget, means what is the message going to do
   * e.g. 1. purpose: 'changeBarColor' means the message is going to change the color of the bar for bar chart widget
   *    2. purpose: 'updateWidgetData' means the message is going to update the widget data
   *
   * @param value {BaseMessagePurpose} - Message Purpose
   */
  set purpose(value: BaseMessagePurpose) {
    this._purpose = value;
  }

  /**
   * payload is the data for the message
   * e.g. payload: { color: 'red' } means the color is red
   * @return {MessagePayload} - Message Payload
   */
  get payload(): MessagePayload | undefined {
    return this._payload;
  }

  /**
   * payload is the data for the message
   * e.g. payload: { color: 'red' } means the color is red
   * @param value {MessagePayload} - Message Payload
   */
  set payload(value: MessagePayload) {
    this._payload = {
      updateWidgets: value.updateWidgets.map(item => (
        {
          ...item,
          id: item.id ?? this.widgetId,
          type: item.type ?? this.widgetType,
        }
      ))
    }
    this._payload = value;
  }

  /**
   * triggerAction is the action that triggered by user or system
   * e.g. triggerAction: 'onClick' means the user clicked the button
   * @return {BaseTriggerActions} - Message Trigger Action
   */
  get actionRequest(): ActionRequest | undefined {
    return this._actionRequest;
  }

  /**
   * triggerAction is the action that triggered by user or system
   * @param value {BaseTriggerActions} - Message Trigger Action
   */
  set actionRequest(value: ActionRequest) {
    this._actionRequest = value;
  }

  get widgetWidth(): number | undefined {
    return this._widgetWidth;
  }

  set widgetWidth(value: number) {
    this._widgetWidth = value;
  }

  get widgetHeight(): number | undefined {
    return this._widgetHeight;
  }

  set widgetHeight(value: number) {
    this._widgetHeight = value;
  }

  /**
   * Send message to WebView2
   */
  toJSON(): any {
    return {
      widgetId: this.widgetId,
      widgetType: this.widgetType,
      purpose: this.purpose,
      widgetWidth: this.widgetWidth,
      widgetHeight: this.widgetHeight,
      payload: this.payload,
      actionRequest: this.actionRequest,
      sequenceId: this.sequenceId,
      chunkIndex: this.chunkIndex,
      totalChunks: this.totalChunks,
      isChunk: this.isChunk
    };
  }

  toString(): string {
    return JSON.stringify(this.toJSON());
  }

  static toMessage(message: string): Message | undefined {
    try {
      const parsedMessage = JSON.parse(message);
      return new Message(
        {
          widgetId: parsedMessage.widgetId ?? undefined,
          widgetType: parsedMessage.widgetType ?? undefined,
          purpose: parsedMessage.purpose ?? undefined,
          widgetWidth: parsedMessage.widgetWidth ?? undefined,
          widgetHeight: parsedMessage.widgetHeight ?? undefined,
          payload: parsedMessage.payload ?? undefined,
          actionRequest: parsedMessage.actionRequest ?? undefined,
          sequenceId: parsedMessage.sequenceId ?? undefined,
          chunkIndex: parsedMessage.chunkIndex ?? undefined,
          totalChunks: parsedMessage.totalChunks ?? undefined,
          isChunk: parsedMessage.isChunk ?? false
        }
      );
    } catch (JSONError) {
      console.error('JSON parse error:', JSONError);
      return undefined;
    }
  }
}