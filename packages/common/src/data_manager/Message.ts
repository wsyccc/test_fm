import {BaseMessagePurpose, BaseTriggerActions, MessageSource, WidgetType} from "../../constatns";

export class Message<T = Record<string, any>, S = BaseTriggerActions, F = BaseMessagePurpose> {
  private _widgetId: string;
  private _widgetType: WidgetType;
  private _source: MessageSource;
  private _purpose: BaseMessagePurpose & F;
  private _payload?: T;
  private _triggerAction?: BaseTriggerActions & S;

  constructor(
    widgetId: string,
    widgetType: WidgetType,
    source: MessageSource,
    purpose: BaseMessagePurpose & F,
    payload: T,
    triggerAction?: BaseTriggerActions & S
  ) {
    this._widgetId = widgetId;
    this._widgetType = widgetType;
    this._source = source;
    this._purpose = purpose;
    this._payload = payload;
    this._triggerAction = triggerAction;
  }

  /**
   * Get Widget ID - Generated by Webview2
   *
   *
   * @return {string} - Widget ID
   */
  get widgetId(): string {
    return this._widgetId;
  }

  /**
   * Set Widget ID - Generated by Webview2
   * @param value {string} - Widget ID
   */
  set widgetId(value: string) {
    this._widgetId = value;
  }

  /**
   * Get Widget Type
   * @return {string} - Widget Type
   */
  get widgetType(): WidgetType {
    return this._widgetType;
  }

  /**
   * Set Widget Type
   * @param value {WidgetType} - Widget Type
   */
  set widgetType(value: WidgetType) {
    this._widgetType = value;
  }

  /**
   * MessageSource is where the message comes from
   * from react to pm or from pm to react
   * @return {MessageSource} - Message Source
   */
  get source(): MessageSource {
    return this._source;
  }

  /**
   * MessageSource is where the message comes from
   * from react to pm or from pm to react
   * @param value {MessageSource} - Message Source
   */
  set source(value: MessageSource) {
    this._source = value;
  }


  /**
   * purpose of the sending this message
   * F is defined by each widget, means what is the message going to do
   * e.g. 1. purpose: 'changeBarColor' means the message is going to change the color of the bar for bar chart widget
   *     2. purpose: 'updateWidgetData' means the message is going to update the widget data
   *
   * @return {BaseMessagePurpose & F} - Message Purpose
   */
  get purpose(): BaseMessagePurpose & F {
    return this._purpose;
  }


  /**
   * purpose of the sending this message
   * F is defined by each widget, means what is the message going to do
   * e.g. 1. purpose: 'changeBarColor' means the message is going to change the color of the bar for bar chart widget
   *    2. purpose: 'updateWidgetData' means the message is going to update the widget data
   *
   * @param value {BaseMessagePurpose & F} - Message Purpose
   */
  set purpose(value: BaseMessagePurpose & F) {
    this._purpose = value;
  }

  /**
   * payload is the data for the message
   * e.g. payload: { color: 'red' } means the color is red
   * @return {T} - Message Payload
   */
  get payload(): T {
    return this._payload;
  }

  /**
   * payload is the data for the message
   * e.g. payload: { color: 'red' } means the color is red
   * @param value {T} - Message Payload
   */
  set payload(value: T) {
    this._payload = value;
  }

  /**
   * triggerAction is the action that triggered by user or system
   * e.g. triggerAction: 'onClick' means the user clicked the button
   * @return {BaseTriggerActions & S} - Message Trigger Action
   */
  get triggerAction(): BaseTriggerActions & S {
    return this._triggerAction;
  }

  /**
   * triggerAction is the action that triggered by user or system
   * @param value {BaseTriggerActions & S} - Message Trigger Action
   */
  set triggerAction(value: BaseTriggerActions & S) {
    this._triggerAction = value;
  }

  /**
   * Send message to WebView2
   */
  toJSON(): any {
    return {
      widgetId: this._widgetId,
      widgetType: this._widgetType,
      source: this._source,
      purpose: this._purpose,
      payload: this._payload,
      triggerAction: this._triggerAction
    };
  }

  toString(): string {
    return JSON.stringify(this.toJSON());
  }

  static toMessage(message: string): Message {
    try {
      const parsedMessage = JSON.parse(message);
      return new Message(
        parsedMessage.widgetId,
        parsedMessage.widgetType,
        parsedMessage.source,
        parsedMessage.purpose,
        parsedMessage.payload,
        parsedMessage.triggerAction
      );
    }catch (JSONError) {
      console.error('JSON parse error:', JSONError);
      return undefined;
    }
  }
}