import {BaseMessagePurpose, BaseTriggerActions, MessageSource, WidgetType} from "../../constatns";

/**
 * Message class
 * T is the payload type
 * S is the trigger action type
 * F is the message purpose type
 */
export class Message<T = Record<string, any>, S = BaseTriggerActions[], F = BaseMessagePurpose> {
  private _source: MessageSource;
  private _purpose: BaseMessagePurpose & F;
  private _widgetId?: string;
  private _widgetType?: WidgetType;
  private _payload?: T;
  private _triggerAction?: BaseTriggerActions[] & S;
  private _sequenceId?: string;
  private _chunkIndex?: number;
  private _totalChunks?: number;
  private _isChunk?: boolean;

  constructor({
                source,
                purpose,
                widgetId,
                widgetType,
                payload,
                triggerAction,
                sequenceId,
                chunkIndex,
                totalChunks,
                isChunk
              }: {
    source: MessageSource;
    purpose: BaseMessagePurpose & F;
    widgetId?: string;
    widgetType?: WidgetType;
    payload?: T;
    triggerAction?: BaseTriggerActions[] & S;
    sequenceId?: string;
    chunkIndex?: number;
    totalChunks?: number;
    isChunk?: boolean;
  }) {
    this._widgetId = widgetId;
    this._widgetType = widgetType;
    this._source = source;
    this._purpose = purpose;
    this._payload = payload;
    this._triggerAction = triggerAction;
    this._sequenceId = sequenceId;
    this._chunkIndex = chunkIndex;
    this._totalChunks = totalChunks;
    this._isChunk = isChunk;
  }

  /**
   * Get sequenceId
   * @return {string} - Sequence ID
   */
  get sequenceId(): string | undefined {
    return this._sequenceId;
  }

  /**
   * Set sequenceId
   * @param value {string} - Sequence ID
   */
  set sequenceId(value: string) {
    this._sequenceId = value;
  }

  /**
   * Get chunkIndex
   * @return {number} - Chunk Index
   */
  get chunkIndex(): number | undefined {
    return this._chunkIndex;
  }

  /**
   * Set chunkIndex
   * @param value {number} - Chunk Index
   */
  set chunkIndex(value: number) {
    this._chunkIndex = value;
  }

  /**
   * Get totalChunks
   * @return {number} - Total Chunks
   */
  get totalChunks(): number | undefined {
    return this._totalChunks;
  }

  /**
   * Set totalChunks
   * @param value {number} - Total Chunks
   */
  set totalChunks(value: number) {
    this._totalChunks = value;
  }

  /**
   * Check if the message is a chunk
   * @return {boolean} - Is Chunk
   */
  get isChunk(): boolean | undefined {
    return this._isChunk;
  }

  /**
   * Set if the message is a chunk
   * @param value {boolean} - Is Chunk
   */
  set isChunk(value: boolean) {
    this._isChunk = value;
  }

  /**
   * Get Widget ID - Generated by Webview2
   *
   *
   * @return {string} - Widget ID
   */
  get widgetId(): string | undefined {
    return this._widgetId;
  }

  /**
   * Set Widget ID - Generated by Webview2
   * @param value {string} - Widget ID
   */
  set widgetId(value: string) {
    this._widgetId = value;
  }

  /**
   * Get Widget Type
   * @return {string} - Widget Type
   */
  get widgetType(): WidgetType | undefined {
    return this._widgetType;
  }

  /**
   * Set Widget Type
   * @param value {WidgetType} - Widget Type
   */
  set widgetType(value: WidgetType) {
    this._widgetType = value;
  }

  /**
   * MessageSource is where the message comes from
   * from react to pm or from pm to react
   * @return {MessageSource} - Message Source
   */
  get source(): MessageSource {
    return this._source;
  }

  /**
   * MessageSource is where the message comes from
   * from react to pm or from pm to react
   * @param value {MessageSource} - Message Source
   */
  set source(value: MessageSource) {
    this._source = value;
  }


  /**
   * purpose of the sending this message
   * F is defined by each widget, means what is the message going to do
   * e.g. 1. purpose: 'changeBarColor' means the message is going to change the color of the bar for bar chart widget
   *     2. purpose: 'updateWidgetData' means the message is going to update the widget data
   *
   * @return {BaseMessagePurpose & F} - Message Purpose
   */
  get purpose(): BaseMessagePurpose & F {
    return this._purpose;
  }


  /**
   * purpose of the sending this message
   * F is defined by each widget, means what is the message going to do
   * e.g. 1. purpose: 'changeBarColor' means the message is going to change the color of the bar for bar chart widget
   *    2. purpose: 'updateWidgetData' means the message is going to update the widget data
   *
   * @param value {BaseMessagePurpose & F} - Message Purpose
   */
  set purpose(value: BaseMessagePurpose & F) {
    this._purpose = value;
  }

  /**
   * payload is the data for the message
   * e.g. payload: { color: 'red' } means the color is red
   * @return {T} - Message Payload
   */
  get payload(): T | undefined {
    return this._payload;
  }

  /**
   * payload is the data for the message
   * e.g. payload: { color: 'red' } means the color is red
   * @param value {T} - Message Payload
   */
  set payload(value: T) {
    this._payload = value;
  }

  /**
   * triggerAction is the action that triggered by user or system
   * e.g. triggerAction: 'onClick' means the user clicked the button
   * @return {BaseTriggerActions & S} - Message Trigger Action
   */
  get triggerAction(): (BaseTriggerActions[] & S) | undefined {
    return this._triggerAction;
  }

  /**
   * triggerAction is the action that triggered by user or system
   * @param value {BaseTriggerActions & S} - Message Trigger Action
   */
  set triggerAction(value: BaseTriggerActions[] & S) {
    this._triggerAction = value;
  }

  /**
   * Send message to WebView2
   */
  toJSON(): any {
    return {
      widgetId: this._widgetId,
      widgetType: this._widgetType,
      source: this._source,
      purpose: this._purpose,
      payload: this._payload,
      triggerAction: this._triggerAction
    };
  }

  toString(): string {
    return JSON.stringify(this.toJSON());
  }

  static toMessage(message: string): Message | undefined {
    try {
      const parsedMessage = JSON.parse(message);
      return new Message(
        {
          widgetId: parsedMessage.widgetId ?? undefined,
          widgetType: parsedMessage.widgetType ?? undefined,
          source: parsedMessage.source ?? undefined,
          purpose: parsedMessage.purpose ?? undefined,
          payload: parsedMessage.payload ?? undefined,
          triggerAction: parsedMessage.triggerAction ?? undefined,
          sequenceId: parsedMessage.sequenceId ?? undefined,
          chunkIndex: parsedMessage.chunkIndex ?? undefined,
          totalChunks: parsedMessage.totalChunks ?? undefined,
          isChunk: parsedMessage.isChunk ?? false
        }
      );
    } catch (JSONError) {
      console.error('JSON parse error:', JSONError);
      return undefined;
    }
  }
}